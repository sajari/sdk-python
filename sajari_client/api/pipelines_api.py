"""
    Sajari API

    Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.  # noqa: E501

    The version of the OpenAPI document: v4
    Contact: support@sajari.com
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401

from sajari_client.api_client import ApiClient, Endpoint as _Endpoint
from sajari_client.model.generate_pipelines_request import GeneratePipelinesRequest
from sajari_client.model.generate_pipelines_response import GeneratePipelinesResponse
from sajari_client.model.get_default_pipeline_response import GetDefaultPipelineResponse
from sajari_client.model.list_pipelines_response import ListPipelinesResponse
from sajari_client.model.pipeline import Pipeline
from sajari_client.model.set_default_pipeline_request import SetDefaultPipelineRequest
from sajari_client.model.set_default_version_request import SetDefaultVersionRequest
from sajari_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)


class PipelinesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_pipeline(
                self,
                collection_id,
                pipeline,
                **kwargs
        ):
            """Create pipeline  # noqa: E501

            Create a new pipeline.  Pipelines are immutable once created. If you want to change a pipeline e.g. to add or change some steps, you need to create a new version of that pipeline.  To start using a new pipeline you need to update your record ingestion calls and/or your query calls to specify the new pipeline.  To create the pipeline from YAML, set the request's `Content-Type` header to `application/yaml` and submit the pipeline's YAML in the request body.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_pipeline(collection_id, pipeline, async_req=True)
            >>> result = thread.get()

            Args:
                collection_id (str): The collection to create the pipeline in, e.g. `my-collection`.
                pipeline (Pipeline): The pipeline to create.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Pipeline
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['collection_id'] = \
                collection_id
            kwargs['pipeline'] = \
                pipeline
            return self.call_with_http_info(**kwargs)

        self.create_pipeline = _Endpoint(
            settings={
                'response_type': (Pipeline,),
                'auth': [
                    'BasicAuth'
                ],
                'endpoint_path': '/v4/collections/{collection_id}/pipelines',
                'operation_id': 'create_pipeline',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'pipeline',
                ],
                'required': [
                    'collection_id',
                    'pipeline',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'pipeline':
                        (Pipeline,),
                },
                'attribute_map': {
                    'collection_id': 'collection_id',
                },
                'location_map': {
                    'collection_id': 'path',
                    'pipeline': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml'
                ],
                'content_type': [
                    'application/json',
                    'application/yaml'
                ]
            },
            api_client=api_client,
            callable=__create_pipeline
        )

        def __generate_pipelines(
                self,
                collection_id,
                generate_pipelines_request,
                **kwargs
        ):
            """Generate pipelines  # noqa: E501

            Generate basic record, query and autocomplete pipeline templates. Use these templates as a starting point for your collection's pipelines.  This call returns a set of pipelines that you can pass directly to the create pipeline call.  The generated templates can be returned in JSON, the default, or YAML. To return the generated pipelines in YAML, set the request's `Accept` header to `application/yaml`. The three pipelines in the YAML response are separated by three dashes (`---`).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.generate_pipelines(collection_id, generate_pipelines_request, async_req=True)
            >>> result = thread.get()

            Args:
                collection_id (str): The collection, e.g. `my-collection`.
                generate_pipelines_request (GeneratePipelinesRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GeneratePipelinesResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['collection_id'] = \
                collection_id
            kwargs['generate_pipelines_request'] = \
                generate_pipelines_request
            return self.call_with_http_info(**kwargs)

        self.generate_pipelines = _Endpoint(
            settings={
                'response_type': (GeneratePipelinesResponse,),
                'auth': [
                    'BasicAuth'
                ],
                'endpoint_path': '/v4/collections/{collection_id}:generatePipelines',
                'operation_id': 'generate_pipelines',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'generate_pipelines_request',
                ],
                'required': [
                    'collection_id',
                    'generate_pipelines_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'generate_pipelines_request':
                        (GeneratePipelinesRequest,),
                },
                'attribute_map': {
                    'collection_id': 'collection_id',
                },
                'location_map': {
                    'collection_id': 'path',
                    'generate_pipelines_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__generate_pipelines
        )

        def __get_default_pipeline(
                self,
                collection_id,
                type="TYPE_UNSPECIFIED",
                **kwargs
        ):
            """Get default pipeline  # noqa: E501

            Get the default pipeline for a collection.  Every collection has a default record pipeline and a default query pipeline.  When a pipeline is required to complete an operation, it can be omitted from the request if a default pipeline has been set. When adding a record to a collection, the default record pipeline is used if none is provided. When querying a collection, the default query pipeline is used if none is provided.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_default_pipeline(collection_id, type="TYPE_UNSPECIFIED", async_req=True)
            >>> result = thread.get()

            Args:
                collection_id (str): The collection to get the default query pipeline of, e.g. `my-collection`.
                type (str): The type of the pipeline to get.   - TYPE_UNSPECIFIED: Pipeline type not specified.  - RECORD: Record pipeline.  - QUERY: Query pipeline.. defaults to "TYPE_UNSPECIFIED", must be one of ["TYPE_UNSPECIFIED"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GetDefaultPipelineResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['collection_id'] = \
                collection_id
            kwargs['type'] = \
                type
            return self.call_with_http_info(**kwargs)

        self.get_default_pipeline = _Endpoint(
            settings={
                'response_type': (GetDefaultPipelineResponse,),
                'auth': [
                    'BasicAuth'
                ],
                'endpoint_path': '/v4/collections/{collection_id}:getDefaultPipeline',
                'operation_id': 'get_default_pipeline',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'type',
                ],
                'required': [
                    'collection_id',
                    'type',
                ],
                'nullable': [
                ],
                'enum': [
                    'type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('type',): {

                        "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",
                        "RECORD": "RECORD",
                        "QUERY": "QUERY"
                    },
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'type':
                        (str,),
                },
                'attribute_map': {
                    'collection_id': 'collection_id',
                    'type': 'type',
                },
                'location_map': {
                    'collection_id': 'path',
                    'type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_default_pipeline
        )

        def __get_default_version(
                self,
                collection_id,
                type,
                name,
                **kwargs
        ):
            """Get default pipeline version  # noqa: E501

            Get the default version for a given pipeline.  The default version of a pipeline is used when a pipeline is referred to without specifying a version.  This allows you to change the pipeline version used for requests without having to change your code.  To retrieve the pipeline in YAML, set the request's `Accept` header to `application/yaml`.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_default_version(collection_id, type, name, async_req=True)
            >>> result = thread.get()

            Args:
                collection_id (str): The collection that owns the pipeline to get the default version of, e.g. `my-collection`.
                type (str): The type of the pipeline to get the default version of.
                name (str): The name of the pipeline to get the default version of, e.g. `my-pipeline`.

            Keyword Args:
                view (str): The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the `BASIC` view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from `BASIC`, plus full step configuration.. [optional] if omitted the server will use the default value of "VIEW_UNSPECIFIED"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Pipeline
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['collection_id'] = \
                collection_id
            kwargs['type'] = \
                type
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.get_default_version = _Endpoint(
            settings={
                'response_type': (Pipeline,),
                'auth': [
                    'BasicAuth'
                ],
                'endpoint_path': '/v4/collections/{collection_id}/pipelines/{type}/{name}:getDefaultVersion',
                'operation_id': 'get_default_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'type',
                    'name',
                    'view',
                ],
                'required': [
                    'collection_id',
                    'type',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                    'type',
                    'view',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('type',): {

                        "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",
                        "RECORD": "RECORD",
                        "QUERY": "QUERY"
                    },
                    ('view',): {

                        "VIEW_UNSPECIFIED": "VIEW_UNSPECIFIED",
                        "BASIC": "BASIC",
                        "FULL": "FULL"
                    },
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'type':
                        (str,),
                    'name':
                        (str,),
                    'view':
                        (str,),
                },
                'attribute_map': {
                    'collection_id': 'collection_id',
                    'type': 'type',
                    'name': 'name',
                    'view': 'view',
                },
                'location_map': {
                    'collection_id': 'path',
                    'type': 'path',
                    'name': 'path',
                    'view': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_default_version
        )

        def __get_pipeline(
                self,
                collection_id,
                type,
                name,
                version,
                **kwargs
        ):
            """Get pipeline  # noqa: E501

            Retrieve the details of a pipeline. Supply the type, name and version.  To retrieve the pipeline in YAML, set the request's `Accept` header to `application/yaml`.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_pipeline(collection_id, type, name, version, async_req=True)
            >>> result = thread.get()

            Args:
                collection_id (str): The collection that owns the pipeline, e.g. `my-collection`.
                type (str): The type of the pipeline to retrieve.
                name (str): The name of the pipeline to retrieve, e.g. `my-pipeline`.
                version (str): The version of the pipeline to retrieve, e.g. `42`.

            Keyword Args:
                view (str): The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the `BASIC` view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from `BASIC`, plus full step configuration.. [optional] if omitted the server will use the default value of "VIEW_UNSPECIFIED"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Pipeline
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['collection_id'] = \
                collection_id
            kwargs['type'] = \
                type
            kwargs['name'] = \
                name
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.get_pipeline = _Endpoint(
            settings={
                'response_type': (Pipeline,),
                'auth': [
                    'BasicAuth'
                ],
                'endpoint_path': '/v4/collections/{collection_id}/pipelines/{type}/{name}/{version}',
                'operation_id': 'get_pipeline',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'type',
                    'name',
                    'version',
                    'view',
                ],
                'required': [
                    'collection_id',
                    'type',
                    'name',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                    'type',
                    'view',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('type',): {

                        "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",
                        "RECORD": "RECORD",
                        "QUERY": "QUERY"
                    },
                    ('view',): {

                        "VIEW_UNSPECIFIED": "VIEW_UNSPECIFIED",
                        "BASIC": "BASIC",
                        "FULL": "FULL"
                    },
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'type':
                        (str,),
                    'name':
                        (str,),
                    'version':
                        (str,),
                    'view':
                        (str,),
                },
                'attribute_map': {
                    'collection_id': 'collection_id',
                    'type': 'type',
                    'name': 'name',
                    'version': 'version',
                    'view': 'view',
                },
                'location_map': {
                    'collection_id': 'path',
                    'type': 'path',
                    'name': 'path',
                    'version': 'path',
                    'view': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_pipeline
        )

        def __list_pipelines(
                self,
                collection_id,
                **kwargs
        ):
            """List pipelines  # noqa: E501

            Retrieve a list of pipelines.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_pipelines(collection_id, async_req=True)
            >>> result = thread.get()

            Args:
                collection_id (str): The collection that owns this set of pipelines, e.g. `my-collection`.

            Keyword Args:
                page_size (int): The maximum number of pipelines to return. The service may return fewer than this value.  If unspecified, at most 50 pipelines are returned.  The maximum value is 1000; values above 1000 are coerced to 1000.. [optional]
                page_token (str): A page token, received from a previous [ListPipelines](/api#operation/ListPipelines) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListPipelines](/api#operation/ListPipelines) must match the call that provided the page token.. [optional]
                view (str): The amount of information to include in each retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the `BASIC` view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from `BASIC`, plus full step configuration.. [optional] if omitted the server will use the default value of "VIEW_UNSPECIFIED"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ListPipelinesResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['collection_id'] = \
                collection_id
            return self.call_with_http_info(**kwargs)

        self.list_pipelines = _Endpoint(
            settings={
                'response_type': (ListPipelinesResponse,),
                'auth': [
                    'BasicAuth'
                ],
                'endpoint_path': '/v4/collections/{collection_id}/pipelines',
                'operation_id': 'list_pipelines',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'page_size',
                    'page_token',
                    'view',
                ],
                'required': [
                    'collection_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'view',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('view',): {

                        "VIEW_UNSPECIFIED": "VIEW_UNSPECIFIED",
                        "BASIC": "BASIC",
                        "FULL": "FULL"
                    },
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                    'view':
                        (str,),
                },
                'attribute_map': {
                    'collection_id': 'collection_id',
                    'page_size': 'page_size',
                    'page_token': 'page_token',
                    'view': 'view',
                },
                'location_map': {
                    'collection_id': 'path',
                    'page_size': 'query',
                    'page_token': 'query',
                    'view': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_pipelines
        )

        def __set_default_pipeline(
                self,
                collection_id,
                set_default_pipeline_request,
                **kwargs
        ):
            """Set default pipeline  # noqa: E501

            Set the default pipeline for a collection.  Every collection has a default record pipeline and a default query pipeline.  When a pipeline is required to complete an operation, it can be omitted from the request if a default pipeline has been set. When adding a record to a collection, the default record pipeline is used if none is provided. When querying a collection, the default query pipeline is used if none is provided.  Once a default pipeline has been set it cannot be cleared, only set to another pipeline.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.set_default_pipeline(collection_id, set_default_pipeline_request, async_req=True)
            >>> result = thread.get()

            Args:
                collection_id (str): The collection to set the default query pipeline of, e.g. `my-collection`.
                set_default_pipeline_request (SetDefaultPipelineRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['collection_id'] = \
                collection_id
            kwargs['set_default_pipeline_request'] = \
                set_default_pipeline_request
            return self.call_with_http_info(**kwargs)

        self.set_default_pipeline = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BasicAuth'
                ],
                'endpoint_path': '/v4/collections/{collection_id}:setDefaultPipeline',
                'operation_id': 'set_default_pipeline',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'set_default_pipeline_request',
                ],
                'required': [
                    'collection_id',
                    'set_default_pipeline_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'set_default_pipeline_request':
                        (SetDefaultPipelineRequest,),
                },
                'attribute_map': {
                    'collection_id': 'collection_id',
                },
                'location_map': {
                    'collection_id': 'path',
                    'set_default_pipeline_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__set_default_pipeline
        )

        def __set_default_version(
                self,
                collection_id,
                type,
                name,
                set_default_version_request,
                **kwargs
        ):
            """Set default pipeline version  # noqa: E501

            Set the default version for a given pipeline.  The default version of a pipeline is used when a pipeline is referred to without specifying a version.  This allows you to change the pipeline version used for requests without having to change your code.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.set_default_version(collection_id, type, name, set_default_version_request, async_req=True)
            >>> result = thread.get()

            Args:
                collection_id (str): The collection that owns the pipeline to set the default version of, e.g. `my-collection`.
                type (str): The type of the pipeline to set the default version of.
                name (str): The name of the pipeline to set the default version of, e.g. `my-pipeline`.
                set_default_version_request (SetDefaultVersionRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['collection_id'] = \
                collection_id
            kwargs['type'] = \
                type
            kwargs['name'] = \
                name
            kwargs['set_default_version_request'] = \
                set_default_version_request
            return self.call_with_http_info(**kwargs)

        self.set_default_version = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BasicAuth'
                ],
                'endpoint_path': '/v4/collections/{collection_id}/pipelines/{type}/{name}:setDefaultVersion',
                'operation_id': 'set_default_version',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'collection_id',
                    'type',
                    'name',
                    'set_default_version_request',
                ],
                'required': [
                    'collection_id',
                    'type',
                    'name',
                    'set_default_version_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('type',): {

                        "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",
                        "RECORD": "RECORD",
                        "QUERY": "QUERY"
                    },
                },
                'openapi_types': {
                    'collection_id':
                        (str,),
                    'type':
                        (str,),
                    'name':
                        (str,),
                    'set_default_version_request':
                        (SetDefaultVersionRequest,),
                },
                'attribute_map': {
                    'collection_id': 'collection_id',
                    'type': 'type',
                    'name': 'name',
                },
                'location_map': {
                    'collection_id': 'path',
                    'type': 'path',
                    'name': 'path',
                    'set_default_version_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__set_default_version
        )

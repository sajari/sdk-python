"""
    Search.io API

    The version of the OpenAPI document: 4.0.0
    Contact: support@search.io
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from sajari_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from sajari_client.exceptions import ApiAttributeError


def lazy_import():
    from sajari_client.model.banner import Banner
    from sajari_client.model.promotion_exclusion import PromotionExclusion
    from sajari_client.model.promotion_filter_boost import PromotionFilterBoost
    from sajari_client.model.promotion_filter_condition import PromotionFilterCondition
    from sajari_client.model.promotion_pin import PromotionPin
    from sajari_client.model.promotion_range_boost import PromotionRangeBoost
    globals()['Banner'] = Banner
    globals()['PromotionExclusion'] = PromotionExclusion
    globals()['PromotionFilterBoost'] = PromotionFilterBoost
    globals()['PromotionFilterCondition'] = PromotionFilterCondition
    globals()['PromotionPin'] = PromotionPin
    globals()['PromotionRangeBoost'] = PromotionRangeBoost


class Promotion(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'condition': (str,),  # noqa: E501
            'display_name': (str,),  # noqa: E501
            'banners': ([Banner],),  # noqa: E501
            'collection_id': (str,),  # noqa: E501
            'create_time': (datetime,),  # noqa: E501
            'disabled': (bool,),  # noqa: E501
            'end_time': (datetime,),  # noqa: E501
            'exclusions': ([PromotionExclusion],),  # noqa: E501
            'filter_boosts': ([PromotionFilterBoost],),  # noqa: E501
            'filter_conditions': ([PromotionFilterCondition],),  # noqa: E501
            'id': (str,),  # noqa: E501
            'pins': ([PromotionPin],),  # noqa: E501
            'range_boosts': ([PromotionRangeBoost],),  # noqa: E501
            'start_time': (datetime,),  # noqa: E501
            'update_time': (datetime,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'condition': 'condition',  # noqa: E501
        'display_name': 'display_name',  # noqa: E501
        'banners': 'banners',  # noqa: E501
        'collection_id': 'collection_id',  # noqa: E501
        'create_time': 'create_time',  # noqa: E501
        'disabled': 'disabled',  # noqa: E501
        'end_time': 'end_time',  # noqa: E501
        'exclusions': 'exclusions',  # noqa: E501
        'filter_boosts': 'filter_boosts',  # noqa: E501
        'filter_conditions': 'filter_conditions',  # noqa: E501
        'id': 'id',  # noqa: E501
        'pins': 'pins',  # noqa: E501
        'range_boosts': 'range_boosts',  # noqa: E501
        'start_time': 'start_time',  # noqa: E501
        'update_time': 'update_time',  # noqa: E501
    }

    read_only_vars = {
        'collection_id',  # noqa: E501
        'create_time',  # noqa: E501
        'update_time',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, condition, display_name, *args, **kwargs):  # noqa: E501
        """Promotion - a model defined in OpenAPI

        Args:
            condition (str): A condition expression applied to a search request that determines which searches the promotion is active for.  For example, to apply the promotion's pins and boosts whenever a user searches for 'shoes' set condition to `q = 'shoes'`.
            display_name (str): The promotion's display name.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            banners ([Banner]): The banners that are injected into the result set when the promotion is triggered.. [optional]  # noqa: E501
            collection_id (str): The ID of the collection that owns this promotion.. [optional]  # noqa: E501
            create_time (datetime): The time the promotion was created.. [optional]  # noqa: E501
            disabled (bool): If disabled, the promotion is never triggered.. [optional]  # noqa: E501
            end_time (datetime): If specified, the promotion is considered disabled after this time.. [optional]  # noqa: E501
            exclusions ([PromotionExclusion]): The records to exclude from search results, if the promotion is enabled.. [optional]  # noqa: E501
            filter_boosts ([PromotionFilterBoost]): The filter boosts to apply to searches, if the promotion is enabled.. [optional]  # noqa: E501
            filter_conditions ([PromotionFilterCondition]): The conditions applied to the filters passed from the user. A query must match at least one of these in order to trigger the promotion. A filter condition is comprised of a set of filters of the form `field = value` and matches a query if all of those filters are present in the query.  For example, a query with the filter `productType = 'shirt' AND size = 'medium'` triggers a promotion with the filter condition `productType = 'shirt'`, but not one with both `productType = 'shirt', and `size = 'small'`.. [optional]  # noqa: E501
            id (str): The promotion's ID.. [optional]  # noqa: E501
            pins ([PromotionPin]): The items to fix to specific positions in the search results.. [optional]  # noqa: E501
            range_boosts ([PromotionRangeBoost]): The range boosts to apply to searches, if the promotion is enabled.. [optional]  # noqa: E501
            start_time (datetime): If specified, the promotion is considered disabled before this time.. [optional]  # noqa: E501
            update_time (datetime): The time the promotion was last updated.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.condition = condition
        self.display_name = display_name
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, condition, display_name, *args, **kwargs):  # noqa: E501
        """Promotion - a model defined in OpenAPI

        Args:
            condition (str): A condition expression applied to a search request that determines which searches the promotion is active for.  For example, to apply the promotion's pins and boosts whenever a user searches for 'shoes' set condition to `q = 'shoes'`.
            display_name (str): The promotion's display name.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            banners ([Banner]): The banners that are injected into the result set when the promotion is triggered.. [optional]  # noqa: E501
            collection_id (str): The ID of the collection that owns this promotion.. [optional]  # noqa: E501
            create_time (datetime): The time the promotion was created.. [optional]  # noqa: E501
            disabled (bool): If disabled, the promotion is never triggered.. [optional]  # noqa: E501
            end_time (datetime): If specified, the promotion is considered disabled after this time.. [optional]  # noqa: E501
            exclusions ([PromotionExclusion]): The records to exclude from search results, if the promotion is enabled.. [optional]  # noqa: E501
            filter_boosts ([PromotionFilterBoost]): The filter boosts to apply to searches, if the promotion is enabled.. [optional]  # noqa: E501
            filter_conditions ([PromotionFilterCondition]): The conditions applied to the filters passed from the user. A query must match at least one of these in order to trigger the promotion. A filter condition is comprised of a set of filters of the form `field = value` and matches a query if all of those filters are present in the query.  For example, a query with the filter `productType = 'shirt' AND size = 'medium'` triggers a promotion with the filter condition `productType = 'shirt'`, but not one with both `productType = 'shirt', and `size = 'small'`.. [optional]  # noqa: E501
            id (str): The promotion's ID.. [optional]  # noqa: E501
            pins ([PromotionPin]): The items to fix to specific positions in the search results.. [optional]  # noqa: E501
            range_boosts ([PromotionRangeBoost]): The range boosts to apply to searches, if the promotion is enabled.. [optional]  # noqa: E501
            start_time (datetime): If specified, the promotion is considered disabled before this time.. [optional]  # noqa: E501
            update_time (datetime): The time the promotion was last updated.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.condition = condition
        self.display_name = display_name
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
